# =================================== project ====================================
[project]
  urls = { "Homepage" = "https://github.com/josephcourtney/clio", "Bug Tracker" = "https://github.com/josephcourtney/clio/issues" }
  name = "clio"
  dynamic = ["version"]
  description = "Commandâ€‘Line I/O for Python functions"
  readme = "README.md"
  authors = [
    { name = "Joseph M. Courtney", email = "joseph.m.courtney@gmail.com" },
  ]
  license = { text = "MIT License" }
  classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
  ]
  requires-python = ">=3.12"
  dependencies = [
    "click>=8.1.8",
    "pyperclip>=1.9.0",
  ]

[dependency-groups]
  dev = [
    "ruff>=0.11.0",
    "basedpyright>=1.28.1",
    "coverage>=7.7.0",
    "pytest-cov>=6.0.0",
    "pytest>=8.3.5",
    "pytest-randomly>=3.16.0",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.1",
  ]

# =================================== build ===================================
[build-system]
  requires      = ["hatchling"]
  build-backend = "hatchling.build"

[tool.hatch.build]
  includes = ["src/clio/**"]

[tool.hatch.version]
  path = "src/clio/__version__.py"

# ==================================== lint ====================================
[tool.ruff]
  extend = "./ruff.default.toml"

  [tool.ruff.lint]
    ignore = []

# =================================== typecheck ===================================
[tool.basedpyright]
  typeCheckingMode       = "recommended"
  pythonVersion          = "3.13"
  pythonPlatform         = "Darwin"
  reportImplicitOverride = false
  reportMissingTypeStubs = false
  reportUnusedParameter  = false
  include                = ["src/"]


# =================================== test ===================================
[tool.pytest.ini_options]
  addopts = [
    "--cov=clio",
    "--cov-report=xml",
    "--cov-report=term-missing",
  ]
  testpaths = ["tests"]

# =================================== test:coverage ===================================
[tool.coverage.run]
  branch = true
  source = ["src/clio"]

[tool.coverage.report]
  show_missing = true
  skip_covered = true
  # Regexes for lines to exclude from consideration
  exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
  ]
  ignore_errors = true

[tool.coverage.xml]
  output = ".coverage.xml"
